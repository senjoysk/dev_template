# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## 🚨 重要: プロジェクト固有設定
**プロジェクト名**: {{PROJECT_NAME}}
**技術スタック**: {{TECH_STACK}}
**開発環境**: {{ENVIRONMENT}}

{{#if DEPLOYMENT_COMMANDS}}
## 🚨 重要: デプロイ手順

**Claude Codeは必ず以下のデプロイコマンドを使用してください**

{{DEPLOYMENT_COMMANDS}}
{{/if}}

## 🔴🟢♻️ 開発方針: t_wada式TDD

**すべての開発はテスト駆動開発（TDD）のRed-Green-Refactorサイクルで実施してください**

### TDDの基本サイクル
1. **🔴 Red**: 失敗するテストを書く
2. **🟢 Green**: テストを通す最小限の実装
3. **♻️ Refactor**: テストが通る状態を保ちながらリファクタリング

### t_wadaさんのTDD原則
- **テストファースト**: 実装前に必ずテストを書く
- **小さなステップ**: 一度に一つのことだけ
- **YAGNI (You Aren't Gonna Need It)**: 必要になるまで作らない
- **三角測量**: 複数のテストケースから一般化を導く
- **明白な実装**: シンプルで分かりやすいコードを書く

## 🚨 必須: TDD開発フロー

### 新機能開発の手順
```bash
# 1. 🔴 Red Phase - 失敗するテストを書く
{{TEST_COMMAND_WATCH}}

# 2. 🟢 Green Phase - テストを通す
# 最小限の実装（仮実装でもOK）

# 3. ♻️ Refactor Phase - リファクタリング
# テストが通る状態を維持しながら改善

# 4. 繰り返し
# 次のテストケースに進む
```

### コーディング前の必須確認
- [ ] TODOリストの作成（実装する機能を小さなタスクに分解）
- [ ] 最初のテストケースの決定（最も簡単なケースから）
- [ ] インターフェースの設計（使い方から考える）
- [ ] エラーケースの洗い出し

## 現在のシステムアーキテクチャ（必須理解）
{{ARCHITECTURE_OVERVIEW}}

## TDDでのコーディング規約

### 1. テストファースト開発
```{{PRIMARY_LANGUAGE}}
// ❌ 悪い例: 実装を先に書く
{{BAD_EXAMPLE_IMPLEMENTATION_FIRST}}

// ✅ 良い例: テストから書く
{{GOOD_EXAMPLE_TEST_FIRST}}
```

### 2. インターフェース駆動設計
- **使い方から設計**: テストで理想的な使い方を先に書く
- **Interface First**: インターフェースを定義してから実装
- **依存性注入**: テスタブルな設計のためにインターフェースを注入

### 3. 実装規約
{{IMPLEMENTATION_CONVENTIONS}}

## 技術スタック
{{TECH_STACK_DETAILS}}

## 開発環境セットアップ
{{SETUP_INSTRUCTIONS}}

## TDD実践時の必須確認

### Red Phase（テストを書く）
- [ ] 実装する機能のTODOリストを作成
- [ ] 最も簡単なテストケースから開始
- [ ] テストが失敗することを確認（Red）
- [ ] エラーメッセージが適切であることを確認

### Green Phase（実装する）
- [ ] テストを通す最小限の実装
- [ ] 仮実装（ハードコード）でもOK
- [ ] コピペでもOK（後でDRY）
- [ ] テストが通ることを確認（Green）

### Refactor Phase（改善する）
- [ ] すべてのテストが通ることを確認
- [ ] 重複コードを除去
- [ ] より良い設計に改善
- [ ] パフォーマンスの最適化（必要な場合）

### コミット前の最終確認
```bash
# TDDサイクル完了後の確認
{{BUILD_COMMAND}}              # ビルドエラーチェック
{{TEST_COMMAND}}               # 全テスト実行（必須）
{{COVERAGE_COMMAND}}           # カバレッジ確認
```

## 🚨 Claude Code: タスク完了前の必須確認

**Claude Codeは依頼されたタスクを完了したと判断する前に、以下を必ず実行してください:**

### タスク完了前の品質ゲート
```bash
# 🚨 最重要: Claude Codeはタスク完了前に必ずこれを実行すること

# 1. ビルド確認
{{BUILD_COMMAND}}

# 2. テスト実行
{{TEST_ANALYSIS_SCRIPT}}

# 3. 全テスト成功を確認してから完了報告
echo "✅ 全テスト成功: タスク完了"
```

### 実行タイミング
- **タスク実装完了後**: コードの実装やファイル変更が完了した時点
- **完了報告前**: ユーザーに「完了しました」と報告する前
- **コミット推奨前**: git commitを推奨する前

### 目的
- **早期問題検出**: 開発時点で問題を検出
- **品質保証**: テストでの動作確認
- **開発速度向上**: 後戻り作業の削減

## クリティカル機能の保護

### 重要機能の回帰テスト（必須）
どんな小さな変更でも以下のテストが通ることを確認：
{{CRITICAL_TESTS}}

### 手動動作確認（リリース前）
{{MANUAL_VERIFICATION}}

## アーキテクチャ概要
{{ARCHITECTURE_DETAILS}}

## 📋 必須: 開発チェックリスト参照

**すべての開発作業は以下のTDDサイクルに従って実行してください**

### 🚨 絶対に守るべきTDDルール
1. **テストなしでコードを書かない**
2. **失敗するテストを確認してから実装**
3. **一度に一つのことだけ**
4. **明白な実装を心がける**
5. **TODOリストで進捗管理**

**🚨 CRITICAL: 実装前に必ずテストを書き、Red-Green-Refactorサイクルを守ること**

{{#if DATABASE_MIGRATIONS}}
## 🚨 マイグレーション必須フロー

### データベーススキーマ変更時の必須手順
**Claude Code: スキーマ変更時は以下を必ず実行してください**

{{DATABASE_MIGRATION_INSTRUCTIONS}}
{{/if}}

## 🔄 TDDコメント管理のベストプラクティス

### TDDサイクルにおけるコメント管理の重要性

TDDでは、テストコメントが開発の進行状況を示す重要な指標となります。適切なコメント管理により、開発者は実装の経緯を理解し、将来のメンテナンスを容易にできます。

### フェーズ別コメント管理手順

#### 1. **🔴 Red Phase - 失敗するテストを書く**
```{{PRIMARY_LANGUAGE}}
{{RED_PHASE_EXAMPLE}}
```

#### 2. **🟢 Green Phase - テストを通す最小限の実装**
```{{PRIMARY_LANGUAGE}}
{{GREEN_PHASE_EXAMPLE}}
```

#### 3. **♻️ Refactor Phase - リファクタリング**
```{{PRIMARY_LANGUAGE}}
{{REFACTOR_PHASE_EXAMPLE}}
```

### 実装完了後のコメント整理

#### **開発完了時の最終コメント形式**
```{{PRIMARY_LANGUAGE}}
{{FINAL_COMMENT_EXAMPLE}}
```

### TDDコメント管理チェックリスト

#### **開発時の必須確認**
- [ ] **Red Phase**: テストが失敗することを確認し、🔴コメントを付ける
- [ ] **Green Phase**: テストが通ったら🟢コメントに更新
- [ ] **Refactor Phase**: リファクタリング完了後に♻️コメントに更新
- [ ] **実装完了**: フェーズ表記を削除し、機能説明コメントに変更

{{#if ADDITIONAL_SECTIONS}}
{{ADDITIONAL_SECTIONS}}
{{/if}}

---

**🎯 本開発ガイドは、効率的で高品質な開発を実現するための完全なリファレンスです。TDD開発を徹底し、継続的にシステムを改善していきましょう。**